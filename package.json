{
  "name": "hostbridge",
  "displayName": "Hostbridge for VSCode",
  "description": "Adds a GUI for retrieving, uploading, compiling, and executing hostbridge scripts",
  "version": "0.8.9",
  "publisher": "vs-publisher-126251",
  "repository": {
    "type": "git",
    "url": "https://github.com/KennethScott/hostbridge"
  },
  "enableProposedApi": false,
  "engines": {
    "vscode": "^1.35.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onFileSystem:file",
    "onCommand:extension.updateActiveRepository",
    "onCommand:hostExplorer.make",
    "onCommand:hostExplorer.exec",
    "onCommand:hostExplorer.getRepositoryContents",
    "onCommand:hostExplorer.refresh",
    "onCommand:hostExplorer.delete",
    "onCommand:hostExplorer.get",
    "onCommand:hostExplorer.put",
    "onView:hostView"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "hostView",
          "title": "Host Explorer",
          "icon": "resources/hostbridge-white.png"
        }
      ]
    },
    "views": {
      "hostView": [
        {
          "id": "hostView",
          "name": ""
        }
      ]
    },
    "languages": [
      {
        "id": "javascript",
        "extensions": [
          ".hbx"
        ]
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "hostExplorer.make",
          "group": "yy_hostbridge",
          "when": "resourceExtname == .hbx"
        },
        {
          "command": "hostExplorer.exec",
          "group": "yy_hostbridge",
          "when": "resourceExtname == .hbx"
        },
        {
          "command": "hostExplorer.put",
          "group": "yy_hostbridge"
        }
      ],
      "explorer/context": [
        {
          "command": "hostExplorer.make",
          "group": "yy_hostbridge",
          "when": "resourceExtname == .hbx"
        },
        {
          "command": "hostExplorer.exec",
          "group": "yy_hostbridge",
          "when": "resourceExtname == .hbx"
        },
        {
          "command": "hostExplorer.put",
          "group": "yy_hostbridge"
        }
      ],
      "view/title": [
        {
          "command": "hostExplorer.refresh",
          "when": "view == hostView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "hostExplorer.delete",
          "when": "view == hostView && viewItem == content"
        },
        {
          "command": "hostExplorer.get",
          "when": "view == hostView && viewItem == content"
        },
        {
          "command": "extension.updateActiveRepository",
          "when": "view == hostView && viewItem == repository"
        }
      ]
    },
    "commands": [
      {
        "command": "hostExplorer.make",
        "title": "Make"
      },
      {
        "command": "hostExplorer.exec",
        "title": "Execute"
      },
      {
        "command": "hostExplorer.getRepositoryContents",
        "title": "Get Repository Contents"
      },
      {
        "command": "hostExplorer.delete",
        "title": "Delete"
      },
      {
        "command": "hostExplorer.get",
        "title": "Get"
      },
      {
        "command": "hostExplorer.put",
        "title": "Put"
      },
      {
        "command": "hostExplorer.refresh",
        "title": "Refresh",
        "icon": {
          "light": "resources/light/refresh_light.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "extension.updateActiveRepository",
        "title": "Set Active Repository"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Hostbridge",
      "properties": {
        "hostbridge.hosts": {
          "type": "array",
          "description": "All available hosts, regions, and repositories.",
          "items": {
            "type": "object",
            "title": "Hosts",
            "properties": {
              "name": {
                "type": "string",
                "description": "Host name or IP address"
              },
              "regions": {
                "type": "array",
                "description": "Regions",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "CICS Region Name"
                    },
                    "port": {
                      "type": "number",
                      "description": "CICS Region Port#"
                    },
                    "protocol": {
                      "type": "string",
                      "description": "HTTP or HTTPS"
                    },
                    "userid": {
                      "type": "string",
                      "description": "Specifies the CICS userid to login with."
                    },
                    "repositories": {
                      "type": "array",
                      "description": "Repositories",
                      "items": {
                        "type": "string",
                        "description": "Repository Name"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "hostbridge.activeRepository": {
          "title": "Active Repository",
          "type": "string",
          "description": "Fully qualified name of the active repository (host\\region\\repo)"
        },
        "hostbridge.tempFolderRoot": {
          "type": "string",
          "title": "Temp Folder Root",
          "description": "If not set, defaults to current workspace folder."
        },
        "hostbridge.tempFolderName": {
          "type": "string",
          "title": "Temp Folder Name",
          "default": "HostBridge\\tempFiles",
          "description": "Folder name relative to Temp Folder Root to use for saving downloaded scripts."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "npm run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.6.2",
    "tslint": "^5.18.0",
    "typescript": "^3.5.3",
    "vscode": "^1.1.35"
  },
  "dependencies": {
    "@types/request-promise-native": "^1.0.16",
    "path": "^0.12.7",
    "request": "^2.88.0",
    "request-promise-native": "^1.0.7",
    "xml2js": "^0.4.19"
  }
}
